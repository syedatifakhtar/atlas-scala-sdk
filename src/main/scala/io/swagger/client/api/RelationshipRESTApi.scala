/**
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 2.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.JsonAtlasRelationship
import io.swagger.client.model.JsonAtlasRelationshipWithExtInfo
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class RelationshipRESTApi(
  val defBasePath: String = "https://localhost:21000",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new RelationshipRESTApiAsyncHelper(client, config)

  /**
   * Create a new relationship between entities.
   * Create a new relationship between entities.
   *
   * @param body  (optional)
   * @return JsonAtlasRelationship
   */
  def create(body: Option[JsonAtlasRelationship] = None): Option[JsonAtlasRelationship] = {
    val await = Try(Await.result(createAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create a new relationship between entities. asynchronously
   * Create a new relationship between entities.
   *
   * @param body  (optional)
   * @return Future(JsonAtlasRelationship)
   */
  def createAsync(body: Option[JsonAtlasRelationship] = None): Future[JsonAtlasRelationship] = {
      helper.create(body)
  }

  /**
   * Delete a relationship between entities using guid.
   * Delete a relationship between entities using guid.
   *
   * @param guid  
   * @return void
   */
  def deleteById(guid: String) = {
    val await = Try(Await.result(deleteByIdAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete a relationship between entities using guid. asynchronously
   * Delete a relationship between entities using guid.
   *
   * @param guid  
   * @return Future(void)
   */
  def deleteByIdAsync(guid: String) = {
      helper.deleteById(guid)
  }

  /**
   * Get relationship information between entities using guid.
   * Get relationship information between entities using guid.
   *
   * @param guid  
   * @param extendedInfo  (optional, default to false)
   * @return JsonAtlasRelationshipWithExtInfo
   */
  def getById2(guid: String, extendedInfo: Option[Boolean] = Option(false)): Option[JsonAtlasRelationshipWithExtInfo] = {
    val await = Try(Await.result(getById2Async(guid, extendedInfo), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get relationship information between entities using guid. asynchronously
   * Get relationship information between entities using guid.
   *
   * @param guid  
   * @param extendedInfo  (optional, default to false)
   * @return Future(JsonAtlasRelationshipWithExtInfo)
   */
  def getById2Async(guid: String, extendedInfo: Option[Boolean] = Option(false)): Future[JsonAtlasRelationshipWithExtInfo] = {
      helper.getById2(guid, extendedInfo)
  }

  /**
   * Update an existing relationship between entities.
   * Update an existing relationship between entities.
   *
   * @param body  (optional)
   * @return JsonAtlasRelationship
   */
  def update(body: Option[JsonAtlasRelationship] = None): Option[JsonAtlasRelationship] = {
    val await = Try(Await.result(updateAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update an existing relationship between entities. asynchronously
   * Update an existing relationship between entities.
   *
   * @param body  (optional)
   * @return Future(JsonAtlasRelationship)
   */
  def updateAsync(body: Option[JsonAtlasRelationship] = None): Future[JsonAtlasRelationship] = {
      helper.update(body)
  }

}

class RelationshipRESTApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def create(body: Option[JsonAtlasRelationship] = None
    )(implicit reader: ClientResponseReader[JsonAtlasRelationship], writer: RequestWriter[Option[JsonAtlasRelationship]]): Future[JsonAtlasRelationship] = {
    // create path and map variables
    val path = (addFmt("/v2/relationship"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteById(guid: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/v2/relationship/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling RelationshipRESTApi->deleteById")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getById2(guid: String,
    extendedInfo: Option[Boolean] = Option(false)
    )(implicit reader: ClientResponseReader[JsonAtlasRelationshipWithExtInfo]): Future[JsonAtlasRelationshipWithExtInfo] = {
    // create path and map variables
    val path = (addFmt("/v2/relationship/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling RelationshipRESTApi->getById2")

    extendedInfo match {
      case Some(param) => queryParams += "extendedInfo" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def update(body: Option[JsonAtlasRelationship] = None
    )(implicit reader: ClientResponseReader[JsonAtlasRelationship], writer: RequestWriter[Option[JsonAtlasRelationship]]): Future[JsonAtlasRelationship] = {
    // create path and map variables
    val path = (addFmt("/v2/relationship"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
