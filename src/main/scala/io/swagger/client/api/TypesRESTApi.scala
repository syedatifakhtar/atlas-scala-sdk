/**
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 2.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.JsonAtlasBaseTypeDef
import io.swagger.client.model.JsonAtlasClassificationDef
import io.swagger.client.model.JsonAtlasEntityDef
import io.swagger.client.model.JsonAtlasEnumDef
import io.swagger.client.model.JsonAtlasRelationshipDef
import io.swagger.client.model.JsonAtlasStructDef
import io.swagger.client.model.JsonAtlasTypeDefHeader
import io.swagger.client.model.JsonAtlasTypesDef
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class TypesRESTApi(
  val defBasePath: String = "https://localhost:21000",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new TypesRESTApiAsyncHelper(client, config)

  /**
   * Bulk create APIs for all atlas type definitions, only new definitions will be created.
   * Bulk create APIs for all atlas type definitions, only new definitions will be created. Any changes to the existing definitions will be discarded
   *
   * @param body A composite wrapper object with corresponding lists of the type definition (optional)
   * @return JsonAtlasTypesDef
   */
  def createAtlasTypeDefs(body: Option[JsonAtlasTypesDef] = None): Option[JsonAtlasTypesDef] = {
    val await = Try(Await.result(createAtlasTypeDefsAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Bulk create APIs for all atlas type definitions, only new definitions will be created. asynchronously
   * Bulk create APIs for all atlas type definitions, only new definitions will be created. Any changes to the existing definitions will be discarded
   *
   * @param body A composite wrapper object with corresponding lists of the type definition (optional)
   * @return Future(JsonAtlasTypesDef)
   */
  def createAtlasTypeDefsAsync(body: Option[JsonAtlasTypesDef] = None): Future[JsonAtlasTypesDef] = {
      helper.createAtlasTypeDefs(body)
  }

  /**
   * Delete API for type identified by its name.
   * Delete API for type identified by its name.
   *
   * @param typeName Name of the type to be deleted. 
   * @return void
   */
  def deleteAtlasTypeByName(typeName: String) = {
    val await = Try(Await.result(deleteAtlasTypeByNameAsync(typeName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Delete API for type identified by its name. asynchronously
   * Delete API for type identified by its name.
   *
   * @param typeName Name of the type to be deleted. 
   * @return Future(void)
   */
  def deleteAtlasTypeByNameAsync(typeName: String) = {
      helper.deleteAtlasTypeByName(typeName)
  }

  /**
   * Bulk delete API for all types.
   * Bulk delete API for all types
   *
   * @param body A composite object that captures all types to be deleted (optional)
   * @return void
   */
  def deleteAtlasTypeDefs(body: Option[JsonAtlasTypesDef] = None) = {
    val await = Try(Await.result(deleteAtlasTypeDefsAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Bulk delete API for all types. asynchronously
   * Bulk delete API for all types
   *
   * @param body A composite object that captures all types to be deleted (optional)
   * @return Future(void)
   */
  def deleteAtlasTypeDefsAsync(body: Option[JsonAtlasTypesDef] = None) = {
      helper.deleteAtlasTypeDefs(body)
  }

  /**
   * Bulk retrieval API for retrieving all type definitions in Atlas.
   * Bulk retrieval API for retrieving all type definitions in Atlas
   *
   * @return JsonAtlasTypesDef
   */
  def getAllTypeDefs(): Option[JsonAtlasTypesDef] = {
    val await = Try(Await.result(getAllTypeDefsAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Bulk retrieval API for retrieving all type definitions in Atlas. asynchronously
   * Bulk retrieval API for retrieving all type definitions in Atlas
   *
   * @return Future(JsonAtlasTypesDef)
   */
  def getAllTypeDefsAsync(): Future[JsonAtlasTypesDef] = {
      helper.getAllTypeDefs()
  }

  /**
   * Get the classification definition for the given guid.
   * Get the classification definition for the given guid
   *
   * @param guid classification guid 
   * @return JsonAtlasClassificationDef
   */
  def getClassificationDefByGuid(guid: String): Option[JsonAtlasClassificationDef] = {
    val await = Try(Await.result(getClassificationDefByGuidAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the classification definition for the given guid. asynchronously
   * Get the classification definition for the given guid
   *
   * @param guid classification guid 
   * @return Future(JsonAtlasClassificationDef)
   */
  def getClassificationDefByGuidAsync(guid: String): Future[JsonAtlasClassificationDef] = {
      helper.getClassificationDefByGuid(guid)
  }

  /**
   * Get the classification definition by it&#39;s name (unique).
   * Get the classification definition by it&#39;s name (unique)
   *
   * @param name classification name 
   * @return JsonAtlasClassificationDef
   */
  def getClassificationDefByName(name: String): Option[JsonAtlasClassificationDef] = {
    val await = Try(Await.result(getClassificationDefByNameAsync(name), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the classification definition by it&#39;s name (unique). asynchronously
   * Get the classification definition by it&#39;s name (unique)
   *
   * @param name classification name 
   * @return Future(JsonAtlasClassificationDef)
   */
  def getClassificationDefByNameAsync(name: String): Future[JsonAtlasClassificationDef] = {
      helper.getClassificationDefByName(name)
  }

  /**
   * Get the Entity definition for the given guid.
   * Get the Entity definition for the given guid
   *
   * @param guid entity guid 
   * @return JsonAtlasEntityDef
   */
  def getEntityDefByGuid(guid: String): Option[JsonAtlasEntityDef] = {
    val await = Try(Await.result(getEntityDefByGuidAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the Entity definition for the given guid. asynchronously
   * Get the Entity definition for the given guid
   *
   * @param guid entity guid 
   * @return Future(JsonAtlasEntityDef)
   */
  def getEntityDefByGuidAsync(guid: String): Future[JsonAtlasEntityDef] = {
      helper.getEntityDefByGuid(guid)
  }

  /**
   * Get the entity definition by it&#39;s name (unique).
   * Get the entity definition by it&#39;s name (unique)
   *
   * @param name entity name 
   * @return JsonAtlasEntityDef
   */
  def getEntityDefByName(name: String): Option[JsonAtlasEntityDef] = {
    val await = Try(Await.result(getEntityDefByNameAsync(name), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the entity definition by it&#39;s name (unique). asynchronously
   * Get the entity definition by it&#39;s name (unique)
   *
   * @param name entity name 
   * @return Future(JsonAtlasEntityDef)
   */
  def getEntityDefByNameAsync(name: String): Future[JsonAtlasEntityDef] = {
      helper.getEntityDefByName(name)
  }

  /**
   * Get the enum definition for the given guid.
   * Get the enum definition for the given guid
   *
   * @param guid enum guid 
   * @return JsonAtlasEnumDef
   */
  def getEnumDefByGuid(guid: String): Option[JsonAtlasEnumDef] = {
    val await = Try(Await.result(getEnumDefByGuidAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the enum definition for the given guid. asynchronously
   * Get the enum definition for the given guid
   *
   * @param guid enum guid 
   * @return Future(JsonAtlasEnumDef)
   */
  def getEnumDefByGuidAsync(guid: String): Future[JsonAtlasEnumDef] = {
      helper.getEnumDefByGuid(guid)
  }

  /**
   * Get the enum definition by it&#39;s name (unique).
   * Get the enum definition by it&#39;s name (unique)
   *
   * @param name enum name 
   * @return JsonAtlasEnumDef
   */
  def getEnumDefByName(name: String): Option[JsonAtlasEnumDef] = {
    val await = Try(Await.result(getEnumDefByNameAsync(name), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the enum definition by it&#39;s name (unique). asynchronously
   * Get the enum definition by it&#39;s name (unique)
   *
   * @param name enum name 
   * @return Future(JsonAtlasEnumDef)
   */
  def getEnumDefByNameAsync(name: String): Future[JsonAtlasEnumDef] = {
      helper.getEnumDefByName(name)
  }

  /**
   * Get the relationship definition for the given guid.
   * Get the relationship definition for the given guid
   *
   * @param guid relationship guid 
   * @return JsonAtlasRelationshipDef
   */
  def getRelationshipDefByGuid(guid: String): Option[JsonAtlasRelationshipDef] = {
    val await = Try(Await.result(getRelationshipDefByGuidAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the relationship definition for the given guid. asynchronously
   * Get the relationship definition for the given guid
   *
   * @param guid relationship guid 
   * @return Future(JsonAtlasRelationshipDef)
   */
  def getRelationshipDefByGuidAsync(guid: String): Future[JsonAtlasRelationshipDef] = {
      helper.getRelationshipDefByGuid(guid)
  }

  /**
   * Get the relationship definition by it&#39;s name (unique).
   * Get the relationship definition by it&#39;s name (unique)
   *
   * @param name relationship name 
   * @return JsonAtlasRelationshipDef
   */
  def getRelationshipDefByName(name: String): Option[JsonAtlasRelationshipDef] = {
    val await = Try(Await.result(getRelationshipDefByNameAsync(name), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the relationship definition by it&#39;s name (unique). asynchronously
   * Get the relationship definition by it&#39;s name (unique)
   *
   * @param name relationship name 
   * @return Future(JsonAtlasRelationshipDef)
   */
  def getRelationshipDefByNameAsync(name: String): Future[JsonAtlasRelationshipDef] = {
      helper.getRelationshipDefByName(name)
  }

  /**
   * Get the struct definition for the given guid.
   * Get the struct definition for the given guid
   *
   * @param guid struct guid 
   * @return JsonAtlasStructDef
   */
  def getStructDefByGuid(guid: String): Option[JsonAtlasStructDef] = {
    val await = Try(Await.result(getStructDefByGuidAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the struct definition for the given guid. asynchronously
   * Get the struct definition for the given guid
   *
   * @param guid struct guid 
   * @return Future(JsonAtlasStructDef)
   */
  def getStructDefByGuidAsync(guid: String): Future[JsonAtlasStructDef] = {
      helper.getStructDefByGuid(guid)
  }

  /**
   * Get the struct definition by it&#39;s name (unique).
   * Get the struct definition by it&#39;s name (unique)
   *
   * @param name struct name 
   * @return JsonAtlasStructDef
   */
  def getStructDefByName(name: String): Option[JsonAtlasStructDef] = {
    val await = Try(Await.result(getStructDefByNameAsync(name), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get the struct definition by it&#39;s name (unique). asynchronously
   * Get the struct definition by it&#39;s name (unique)
   *
   * @param name struct name 
   * @return Future(JsonAtlasStructDef)
   */
  def getStructDefByNameAsync(name: String): Future[JsonAtlasStructDef] = {
      helper.getStructDefByName(name)
  }

  /**
   * 
   * 
   *
   * @param guid GUID of the type 
   * @return JsonAtlasBaseTypeDef
   */
  def getTypeDefByGuid(guid: String): Option[JsonAtlasBaseTypeDef] = {
    val await = Try(Await.result(getTypeDefByGuidAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param guid GUID of the type 
   * @return Future(JsonAtlasBaseTypeDef)
   */
  def getTypeDefByGuidAsync(guid: String): Future[JsonAtlasBaseTypeDef] = {
      helper.getTypeDefByGuid(guid)
  }

  /**
   * Get type definition by it&#39;s name.
   * Get type definition by it&#39;s name
   *
   * @param name Type name 
   * @return JsonAtlasBaseTypeDef
   */
  def getTypeDefByName(name: String): Option[JsonAtlasBaseTypeDef] = {
    val await = Try(Await.result(getTypeDefByNameAsync(name), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get type definition by it&#39;s name. asynchronously
   * Get type definition by it&#39;s name
   *
   * @param name Type name 
   * @return Future(JsonAtlasBaseTypeDef)
   */
  def getTypeDefByNameAsync(name: String): Future[JsonAtlasBaseTypeDef] = {
      helper.getTypeDefByName(name)
  }

  /**
   * Bulk retrieval API for all type definitions returned as a list of minimal information header.
   * Bulk retrieval API for all type definitions returned as a list of minimal information header
   *
   * @return List[JsonAtlasTypeDefHeader]
   */
  def getTypeDefHeaders(): Option[List[JsonAtlasTypeDefHeader]] = {
    val await = Try(Await.result(getTypeDefHeadersAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Bulk retrieval API for all type definitions returned as a list of minimal information header. asynchronously
   * Bulk retrieval API for all type definitions returned as a list of minimal information header
   *
   * @return Future(List[JsonAtlasTypeDefHeader])
   */
  def getTypeDefHeadersAsync(): Future[List[JsonAtlasTypeDefHeader]] = {
      helper.getTypeDefHeaders()
  }

  /**
   * Bulk update API for all types, changes detected in the type definitions would be persisted.
   * Bulk update API for all types, changes detected in the type definitions would be persisted
   *
   * @param body A composite object that captures all type definition changes (optional)
   * @return JsonAtlasTypesDef
   */
  def updateAtlasTypeDefs(body: Option[JsonAtlasTypesDef] = None): Option[JsonAtlasTypesDef] = {
    val await = Try(Await.result(updateAtlasTypeDefsAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Bulk update API for all types, changes detected in the type definitions would be persisted. asynchronously
   * Bulk update API for all types, changes detected in the type definitions would be persisted
   *
   * @param body A composite object that captures all type definition changes (optional)
   * @return Future(JsonAtlasTypesDef)
   */
  def updateAtlasTypeDefsAsync(body: Option[JsonAtlasTypesDef] = None): Future[JsonAtlasTypesDef] = {
      helper.updateAtlasTypeDefs(body)
  }

}

class TypesRESTApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def createAtlasTypeDefs(body: Option[JsonAtlasTypesDef] = None
    )(implicit reader: ClientResponseReader[JsonAtlasTypesDef], writer: RequestWriter[Option[JsonAtlasTypesDef]]): Future[JsonAtlasTypesDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/typedefs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteAtlasTypeByName(typeName: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/v2/types/typedef/name/{typeName}")
      replaceAll("\\{" + "typeName" + "\\}", typeName.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (typeName == null) throw new Exception("Missing required parameter 'typeName' when calling TypesRESTApi->deleteAtlasTypeByName")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteAtlasTypeDefs(body: Option[JsonAtlasTypesDef] = None
    )(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Option[JsonAtlasTypesDef]]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/v2/types/typedefs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getAllTypeDefs()(implicit reader: ClientResponseReader[JsonAtlasTypesDef]): Future[JsonAtlasTypesDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/typedefs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getClassificationDefByGuid(guid: String)(implicit reader: ClientResponseReader[JsonAtlasClassificationDef]): Future[JsonAtlasClassificationDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/classificationdef/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling TypesRESTApi->getClassificationDefByGuid")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getClassificationDefByName(name: String)(implicit reader: ClientResponseReader[JsonAtlasClassificationDef]): Future[JsonAtlasClassificationDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/classificationdef/name/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling TypesRESTApi->getClassificationDefByName")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getEntityDefByGuid(guid: String)(implicit reader: ClientResponseReader[JsonAtlasEntityDef]): Future[JsonAtlasEntityDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/entitydef/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling TypesRESTApi->getEntityDefByGuid")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getEntityDefByName(name: String)(implicit reader: ClientResponseReader[JsonAtlasEntityDef]): Future[JsonAtlasEntityDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/entitydef/name/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling TypesRESTApi->getEntityDefByName")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getEnumDefByGuid(guid: String)(implicit reader: ClientResponseReader[JsonAtlasEnumDef]): Future[JsonAtlasEnumDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/enumdef/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling TypesRESTApi->getEnumDefByGuid")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getEnumDefByName(name: String)(implicit reader: ClientResponseReader[JsonAtlasEnumDef]): Future[JsonAtlasEnumDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/enumdef/name/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling TypesRESTApi->getEnumDefByName")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getRelationshipDefByGuid(guid: String)(implicit reader: ClientResponseReader[JsonAtlasRelationshipDef]): Future[JsonAtlasRelationshipDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/relationshipdef/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling TypesRESTApi->getRelationshipDefByGuid")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getRelationshipDefByName(name: String)(implicit reader: ClientResponseReader[JsonAtlasRelationshipDef]): Future[JsonAtlasRelationshipDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/relationshipdef/name/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling TypesRESTApi->getRelationshipDefByName")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getStructDefByGuid(guid: String)(implicit reader: ClientResponseReader[JsonAtlasStructDef]): Future[JsonAtlasStructDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/structdef/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling TypesRESTApi->getStructDefByGuid")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getStructDefByName(name: String)(implicit reader: ClientResponseReader[JsonAtlasStructDef]): Future[JsonAtlasStructDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/structdef/name/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling TypesRESTApi->getStructDefByName")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getTypeDefByGuid(guid: String)(implicit reader: ClientResponseReader[JsonAtlasBaseTypeDef]): Future[JsonAtlasBaseTypeDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/typedef/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling TypesRESTApi->getTypeDefByGuid")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getTypeDefByName(name: String)(implicit reader: ClientResponseReader[JsonAtlasBaseTypeDef]): Future[JsonAtlasBaseTypeDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/typedef/name/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling TypesRESTApi->getTypeDefByName")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getTypeDefHeaders()(implicit reader: ClientResponseReader[List[JsonAtlasTypeDefHeader]]): Future[List[JsonAtlasTypeDefHeader]] = {
    // create path and map variables
    val path = (addFmt("/v2/types/typedefs/headers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateAtlasTypeDefs(body: Option[JsonAtlasTypesDef] = None
    )(implicit reader: ClientResponseReader[JsonAtlasTypesDef], writer: RequestWriter[Option[JsonAtlasTypesDef]]): Future[JsonAtlasTypesDef] = {
    // create path and map variables
    val path = (addFmt("/v2/types/typedefs"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
