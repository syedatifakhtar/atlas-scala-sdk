/**
 * Atlas REST API
 * Atlas exposes a variety of REST endpoints to work with types, entities, lineage and data discovery.
 *
 * OpenAPI spec version: 2.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.JsonAtlasSearchResult
import io.swagger.client.model.JsonAtlasUserSavedSearch
import io.swagger.client.model.JsonSearchParameters
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DiscoveryRESTApi(
  val defBasePath: String = "https://localhost:21000",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DiscoveryRESTApiAsyncHelper(client, config)

  /**
   * 
   * 
   *
   * @param body  (optional)
   * @return JsonAtlasUserSavedSearch
   */
  def addSavedSearch(body: Option[JsonAtlasUserSavedSearch] = None): Option[JsonAtlasUserSavedSearch] = {
    val await = Try(Await.result(addSavedSearchAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param body  (optional)
   * @return Future(JsonAtlasUserSavedSearch)
   */
  def addSavedSearchAsync(body: Option[JsonAtlasUserSavedSearch] = None): Future[JsonAtlasUserSavedSearch] = {
      helper.addSavedSearch(body)
  }

  /**
   * 
   * 
   *
   * @param guid Name of the saved search 
   * @return void
   */
  def deleteSavedSearch(guid: String) = {
    val await = Try(Await.result(deleteSavedSearchAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param guid Name of the saved search 
   * @return Future(void)
   */
  def deleteSavedSearchAsync(guid: String) = {
      helper.deleteSavedSearch(guid)
  }

  /**
   * Attribute based search for entities satisfying the search parameters.
   * Attribute based search for entities satisfying the search parameters
   *
   * @param guid Guid identifying saved search 
   * @return JsonAtlasSearchResult
   */
  def executeSavedSearchByGuid(guid: String): Option[JsonAtlasSearchResult] = {
    val await = Try(Await.result(executeSavedSearchByGuidAsync(guid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Attribute based search for entities satisfying the search parameters. asynchronously
   * Attribute based search for entities satisfying the search parameters
   *
   * @param guid Guid identifying saved search 
   * @return Future(JsonAtlasSearchResult)
   */
  def executeSavedSearchByGuidAsync(guid: String): Future[JsonAtlasSearchResult] = {
      helper.executeSavedSearchByGuid(guid)
  }

  /**
   * Attribute based search for entities satisfying the search parameters.
   * Attribute based search for entities satisfying the search parameters
   *
   * @param name name of saved-search 
   * @param user saved-search owner (optional)
   * @return JsonAtlasSearchResult
   */
  def executeSavedSearchByName(name: String, user: Option[String] = None): Option[JsonAtlasSearchResult] = {
    val await = Try(Await.result(executeSavedSearchByNameAsync(name, user), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Attribute based search for entities satisfying the search parameters. asynchronously
   * Attribute based search for entities satisfying the search parameters
   *
   * @param name name of saved-search 
   * @param user saved-search owner (optional)
   * @return Future(JsonAtlasSearchResult)
   */
  def executeSavedSearchByNameAsync(name: String, user: Option[String] = None): Future[JsonAtlasSearchResult] = {
      helper.executeSavedSearchByName(name, user)
  }

  /**
   * 
   * 
   *
   * @param name Name of the saved search 
   * @param user User for whom the search is retrieved (optional)
   * @return JsonAtlasUserSavedSearch
   */
  def getSavedSearch(name: String, user: Option[String] = None): Option[JsonAtlasUserSavedSearch] = {
    val await = Try(Await.result(getSavedSearchAsync(name, user), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param name Name of the saved search 
   * @param user User for whom the search is retrieved (optional)
   * @return Future(JsonAtlasUserSavedSearch)
   */
  def getSavedSearchAsync(name: String, user: Option[String] = None): Future[JsonAtlasUserSavedSearch] = {
      helper.getSavedSearch(name, user)
  }

  /**
   * 
   * 
   *
   * @param user User for whom the search is retrieved (optional)
   * @return List[JsonAtlasUserSavedSearch]
   */
  def getSavedSearches(user: Option[String] = None): Option[List[JsonAtlasUserSavedSearch]] = {
    val await = Try(Await.result(getSavedSearchesAsync(user), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param user User for whom the search is retrieved (optional)
   * @return Future(List[JsonAtlasUserSavedSearch])
   */
  def getSavedSearchesAsync(user: Option[String] = None): Future[List[JsonAtlasUserSavedSearch]] = {
      helper.getSavedSearches(user)
  }

  /**
   * Relationship search to search for related entities satisfying the search parameters.
   * Relationship search to search for related entities satisfying the search parameters
   *
   * @param excludeDeletedEntities  (optional)
   * @param guid Attribute name (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param relation relationName (optional)
   * @param sortBy sort the result using this attribute name, default value is &#39;name&#39; (optional)
   * @param sortOrder sorting order (optional)
   * @return JsonAtlasSearchResult
   */
  def searchRelatedEntities(excludeDeletedEntities: Option[Boolean] = None, guid: Option[String] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, relation: Option[String] = None, sortBy: Option[String] = None, sortOrder: Option[String] = None): Option[JsonAtlasSearchResult] = {
    val await = Try(Await.result(searchRelatedEntitiesAsync(excludeDeletedEntities, guid, limit, offset, relation, sortBy, sortOrder), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Relationship search to search for related entities satisfying the search parameters. asynchronously
   * Relationship search to search for related entities satisfying the search parameters
   *
   * @param excludeDeletedEntities  (optional)
   * @param guid Attribute name (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param relation relationName (optional)
   * @param sortBy sort the result using this attribute name, default value is &#39;name&#39; (optional)
   * @param sortOrder sorting order (optional)
   * @return Future(JsonAtlasSearchResult)
   */
  def searchRelatedEntitiesAsync(excludeDeletedEntities: Option[Boolean] = None, guid: Option[String] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, relation: Option[String] = None, sortBy: Option[String] = None, sortOrder: Option[String] = None): Future[JsonAtlasSearchResult] = {
      helper.searchRelatedEntities(excludeDeletedEntities, guid, limit, offset, relation, sortBy, sortOrder)
  }

  /**
   * Retrieve data for the specified attribute search query.
   * Retrieve data for the specified attribute search query
   *
   * @param attrName Attribute name (optional)
   * @param attrValuePrefix Attibute value to search on (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param typeName limit the result to only entities of specified type or its sub-types (optional)
   * @return JsonAtlasSearchResult
   */
  def searchUsingAttribute(attrName: Option[String] = None, attrValuePrefix: Option[String] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, typeName: Option[String] = None): Option[JsonAtlasSearchResult] = {
    val await = Try(Await.result(searchUsingAttributeAsync(attrName, attrValuePrefix, limit, offset, typeName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Retrieve data for the specified attribute search query. asynchronously
   * Retrieve data for the specified attribute search query
   *
   * @param attrName Attribute name (optional)
   * @param attrValuePrefix Attibute value to search on (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param typeName limit the result to only entities of specified type or its sub-types (optional)
   * @return Future(JsonAtlasSearchResult)
   */
  def searchUsingAttributeAsync(attrName: Option[String] = None, attrValuePrefix: Option[String] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, typeName: Option[String] = None): Future[JsonAtlasSearchResult] = {
      helper.searchUsingAttribute(attrName, attrValuePrefix, limit, offset, typeName)
  }

  /**
   * Retrieve data for the specified fulltext query.
   * Retrieve data for the specified fulltext query
   *
   * @param classification limit the result to only entities tagged with the given classification or or its sub-types (optional)
   * @param excludeDeletedEntities  (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param query Fulltext query (optional)
   * @param typeName limit the result to only entities of specified type or its sub-types (optional)
   * @return JsonAtlasSearchResult
   */
  def searchUsingBasic(classification: Option[String] = None, excludeDeletedEntities: Option[Boolean] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, query: Option[String] = None, typeName: Option[String] = None): Option[JsonAtlasSearchResult] = {
    val await = Try(Await.result(searchUsingBasicAsync(classification, excludeDeletedEntities, limit, offset, query, typeName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Retrieve data for the specified fulltext query. asynchronously
   * Retrieve data for the specified fulltext query
   *
   * @param classification limit the result to only entities tagged with the given classification or or its sub-types (optional)
   * @param excludeDeletedEntities  (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param query Fulltext query (optional)
   * @param typeName limit the result to only entities of specified type or its sub-types (optional)
   * @return Future(JsonAtlasSearchResult)
   */
  def searchUsingBasicAsync(classification: Option[String] = None, excludeDeletedEntities: Option[Boolean] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, query: Option[String] = None, typeName: Option[String] = None): Future[JsonAtlasSearchResult] = {
      helper.searchUsingBasic(classification, excludeDeletedEntities, limit, offset, query, typeName)
  }

  /**
   * Retrieve data for the specified DSL.
   * Retrieve data for the specified DSL
   *
   * @param classification limit the result to only entities tagged with the given classification or or its sub-types (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param query DSL query (optional)
   * @param typeName limit the result to only entities of specified type or its sub-types (optional)
   * @return JsonAtlasSearchResult
   */
  def searchUsingDSL(classification: Option[String] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, query: Option[String] = None, typeName: Option[String] = None): Option[JsonAtlasSearchResult] = {
    val await = Try(Await.result(searchUsingDSLAsync(classification, limit, offset, query, typeName), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Retrieve data for the specified DSL. asynchronously
   * Retrieve data for the specified DSL
   *
   * @param classification limit the result to only entities tagged with the given classification or or its sub-types (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param query DSL query (optional)
   * @param typeName limit the result to only entities of specified type or its sub-types (optional)
   * @return Future(JsonAtlasSearchResult)
   */
  def searchUsingDSLAsync(classification: Option[String] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, query: Option[String] = None, typeName: Option[String] = None): Future[JsonAtlasSearchResult] = {
      helper.searchUsingDSL(classification, limit, offset, query, typeName)
  }

  /**
   * Retrieve data for the specified fulltext query.
   * Retrieve data for the specified fulltext query
   *
   * @param excludeDeletedEntities  (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param query Fulltext query (optional)
   * @return JsonAtlasSearchResult
   */
  def searchUsingFullText(excludeDeletedEntities: Option[Boolean] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, query: Option[String] = None): Option[JsonAtlasSearchResult] = {
    val await = Try(Await.result(searchUsingFullTextAsync(excludeDeletedEntities, limit, offset, query), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Retrieve data for the specified fulltext query. asynchronously
   * Retrieve data for the specified fulltext query
   *
   * @param excludeDeletedEntities  (optional)
   * @param limit limit the result set to only include the specified number of entries (optional)
   * @param offset start offset of the result set (useful for pagination) (optional)
   * @param query Fulltext query (optional)
   * @return Future(JsonAtlasSearchResult)
   */
  def searchUsingFullTextAsync(excludeDeletedEntities: Option[Boolean] = None, limit: Option[Integer] = None, offset: Option[Integer] = None, query: Option[String] = None): Future[JsonAtlasSearchResult] = {
      helper.searchUsingFullText(excludeDeletedEntities, limit, offset, query)
  }

  /**
   * Attribute based search for entities satisfying the search parameters.
   * Attribute based search for entities satisfying the search parameters
   *
   * @param body Search parameters (optional)
   * @return JsonAtlasSearchResult
   */
  def searchWithParameters(body: Option[JsonSearchParameters] = None): Option[JsonAtlasSearchResult] = {
    val await = Try(Await.result(searchWithParametersAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Attribute based search for entities satisfying the search parameters. asynchronously
   * Attribute based search for entities satisfying the search parameters
   *
   * @param body Search parameters (optional)
   * @return Future(JsonAtlasSearchResult)
   */
  def searchWithParametersAsync(body: Option[JsonSearchParameters] = None): Future[JsonAtlasSearchResult] = {
      helper.searchWithParameters(body)
  }

  /**
   * 
   * 
   *
   * @param body  (optional)
   * @return JsonAtlasUserSavedSearch
   */
  def updateSavedSearch(body: Option[JsonAtlasUserSavedSearch] = None): Option[JsonAtlasUserSavedSearch] = {
    val await = Try(Await.result(updateSavedSearchAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   *  asynchronously
   * 
   *
   * @param body  (optional)
   * @return Future(JsonAtlasUserSavedSearch)
   */
  def updateSavedSearchAsync(body: Option[JsonAtlasUserSavedSearch] = None): Future[JsonAtlasUserSavedSearch] = {
      helper.updateSavedSearch(body)
  }

}

class DiscoveryRESTApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def addSavedSearch(body: Option[JsonAtlasUserSavedSearch] = None
    )(implicit reader: ClientResponseReader[JsonAtlasUserSavedSearch], writer: RequestWriter[Option[JsonAtlasUserSavedSearch]]): Future[JsonAtlasUserSavedSearch] = {
    // create path and map variables
    val path = (addFmt("/v2/search/saved"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def deleteSavedSearch(guid: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/v2/search/saved/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling DiscoveryRESTApi->deleteSavedSearch")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def executeSavedSearchByGuid(guid: String)(implicit reader: ClientResponseReader[JsonAtlasSearchResult]): Future[JsonAtlasSearchResult] = {
    // create path and map variables
    val path = (addFmt("/v2/search/saved/execute/guid/{guid}")
      replaceAll("\\{" + "guid" + "\\}", guid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (guid == null) throw new Exception("Missing required parameter 'guid' when calling DiscoveryRESTApi->executeSavedSearchByGuid")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def executeSavedSearchByName(name: String,
    user: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonAtlasSearchResult]): Future[JsonAtlasSearchResult] = {
    // create path and map variables
    val path = (addFmt("/v2/search/saved/execute/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling DiscoveryRESTApi->executeSavedSearchByName")

    user match {
      case Some(param) => queryParams += "user" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSavedSearch(name: String,
    user: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonAtlasUserSavedSearch]): Future[JsonAtlasUserSavedSearch] = {
    // create path and map variables
    val path = (addFmt("/v2/search/saved/{name}")
      replaceAll("\\{" + "name" + "\\}", name.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (name == null) throw new Exception("Missing required parameter 'name' when calling DiscoveryRESTApi->getSavedSearch")

    user match {
      case Some(param) => queryParams += "user" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def getSavedSearches(user: Option[String] = None
    )(implicit reader: ClientResponseReader[List[JsonAtlasUserSavedSearch]]): Future[List[JsonAtlasUserSavedSearch]] = {
    // create path and map variables
    val path = (addFmt("/v2/search/saved"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    user match {
      case Some(param) => queryParams += "user" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def searchRelatedEntities(excludeDeletedEntities: Option[Boolean] = None,
    guid: Option[String] = None,
    limit: Option[Integer] = None,
    offset: Option[Integer] = None,
    relation: Option[String] = None,
    sortBy: Option[String] = None,
    sortOrder: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonAtlasSearchResult]): Future[JsonAtlasSearchResult] = {
    // create path and map variables
    val path = (addFmt("/v2/search/relationship"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    excludeDeletedEntities match {
      case Some(param) => queryParams += "excludeDeletedEntities" -> param.toString
      case _ => queryParams
    }
    guid match {
      case Some(param) => queryParams += "guid" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    offset match {
      case Some(param) => queryParams += "offset" -> param.toString
      case _ => queryParams
    }
    relation match {
      case Some(param) => queryParams += "relation" -> param.toString
      case _ => queryParams
    }
    sortBy match {
      case Some(param) => queryParams += "sortBy" -> param.toString
      case _ => queryParams
    }
    sortOrder match {
      case Some(param) => queryParams += "sortOrder" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def searchUsingAttribute(attrName: Option[String] = None,
    attrValuePrefix: Option[String] = None,
    limit: Option[Integer] = None,
    offset: Option[Integer] = None,
    typeName: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonAtlasSearchResult]): Future[JsonAtlasSearchResult] = {
    // create path and map variables
    val path = (addFmt("/v2/search/attribute"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    attrName match {
      case Some(param) => queryParams += "attrName" -> param.toString
      case _ => queryParams
    }
    attrValuePrefix match {
      case Some(param) => queryParams += "attrValuePrefix" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    offset match {
      case Some(param) => queryParams += "offset" -> param.toString
      case _ => queryParams
    }
    typeName match {
      case Some(param) => queryParams += "typeName" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def searchUsingBasic(classification: Option[String] = None,
    excludeDeletedEntities: Option[Boolean] = None,
    limit: Option[Integer] = None,
    offset: Option[Integer] = None,
    query: Option[String] = None,
    typeName: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonAtlasSearchResult]): Future[JsonAtlasSearchResult] = {
    // create path and map variables
    val path = (addFmt("/v2/search/basic"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    classification match {
      case Some(param) => queryParams += "classification" -> param.toString
      case _ => queryParams
    }
    excludeDeletedEntities match {
      case Some(param) => queryParams += "excludeDeletedEntities" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    offset match {
      case Some(param) => queryParams += "offset" -> param.toString
      case _ => queryParams
    }
    query match {
      case Some(param) => queryParams += "query" -> param.toString
      case _ => queryParams
    }
    typeName match {
      case Some(param) => queryParams += "typeName" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def searchUsingDSL(classification: Option[String] = None,
    limit: Option[Integer] = None,
    offset: Option[Integer] = None,
    query: Option[String] = None,
    typeName: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonAtlasSearchResult]): Future[JsonAtlasSearchResult] = {
    // create path and map variables
    val path = (addFmt("/v2/search/dsl"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    classification match {
      case Some(param) => queryParams += "classification" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    offset match {
      case Some(param) => queryParams += "offset" -> param.toString
      case _ => queryParams
    }
    query match {
      case Some(param) => queryParams += "query" -> param.toString
      case _ => queryParams
    }
    typeName match {
      case Some(param) => queryParams += "typeName" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def searchUsingFullText(excludeDeletedEntities: Option[Boolean] = None,
    limit: Option[Integer] = None,
    offset: Option[Integer] = None,
    query: Option[String] = None
    )(implicit reader: ClientResponseReader[JsonAtlasSearchResult]): Future[JsonAtlasSearchResult] = {
    // create path and map variables
    val path = (addFmt("/v2/search/fulltext"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    excludeDeletedEntities match {
      case Some(param) => queryParams += "excludeDeletedEntities" -> param.toString
      case _ => queryParams
    }
    limit match {
      case Some(param) => queryParams += "limit" -> param.toString
      case _ => queryParams
    }
    offset match {
      case Some(param) => queryParams += "offset" -> param.toString
      case _ => queryParams
    }
    query match {
      case Some(param) => queryParams += "query" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def searchWithParameters(body: Option[JsonSearchParameters] = None
    )(implicit reader: ClientResponseReader[JsonAtlasSearchResult], writer: RequestWriter[Option[JsonSearchParameters]]): Future[JsonAtlasSearchResult] = {
    // create path and map variables
    val path = (addFmt("/v2/search/basic"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateSavedSearch(body: Option[JsonAtlasUserSavedSearch] = None
    )(implicit reader: ClientResponseReader[JsonAtlasUserSavedSearch], writer: RequestWriter[Option[JsonAtlasUserSavedSearch]]): Future[JsonAtlasUserSavedSearch] = {
    // create path and map variables
    val path = (addFmt("/v2/search/saved"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
